from lection_6.mathematical import base_module

x = base_module.mul # Плохой приём
y = base_module._START_MULT # Очень плохой приём
z = base_module.sub(73, 42)
print(x(2, 3))
print(y)
print(z)
# 1. x = base_math.mul
# Мы передали (не путайте с вызвали) в переменную x функцию mul. Теперь для
# умножения можно использовать более короткое имя. Но x не является понятным
# для других разработчиков именем.
# Логичнее было бы написать:
# multiplication = base_math.mul
# Если же нужно короткое имя, то
# mul = base_math.mul
# В большом файле может быть трудно заметить присвоение нового имени для
# функции. Самым логичным вариантом будет использование сочетания from
# base_math import mul. Или from base_math import mul as mult, если хотим
# дать новое имя.
# 2. y = base_math._START_MULT
# В отличие от from module import * обычный импорт позволяет получить доступ
# к защищённым переменным. Мы смогли прочитать константу _START_MULT. В Python
# действует следующее правило. Все программисты взрослые люди. Если один из них
# нарушает соглашения по написанию кода, значит он готов взять на себя
# ответственность за возможные проблемы.
# Важно! Не используйте защищённые и приватные объекты за пределами модуля,
# в котором они созданы. Особенное если это не ваш модуль. Исключение —
# прописанное в модуле указание на использование.