# Импортируем модуль в основной файл программы через звёздочку
# и попробуем выполнить несколько операций.

from task_import_4 import *

SIZE = 49.5

print(f'{SIZE = }\n{result = }')
# print(f'{z = }') # NameError: name 'z' is not defined
# print(f'{_secret = }') # NameError: name '_secret' is not defined
print(f'{func(100, 200) = }\n{randint(10, 20) = }')

def func(a: int, b: int) -> int:
    return a + b
print(f'{func(100, 200) = }')

# Первая строка импортирует в файл все глобальные публичные объекты.
# Далее мы определяем константу SIZE. В этот момент значение константы
# из модуля затирается новым значением. Возник конфликт имён и Python
# разрешил его в пользу нового значения константы. При этом содержимое
# переменной result берётся из модуля task_import_4, т.к.других определений
# переменной нет в файле. При попытке обратиться к локальным и защищённым
# переменным получаем ошибки. Они не были импортированы “звёздочкой”.

# Далее мы вызываем функции func и randint. Они верно отрабатывают код,
# т.к.обе были импортированы из внешнего модуля. В финале создаём свою
# функцию func. Возникает очередной конфликт имён, который Python разрешает
# в пользу новой функции. В результате вызов func() после её определения
# возвращает совсем другой результат, чем вызовом ранее.