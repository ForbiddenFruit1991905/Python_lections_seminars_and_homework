# Задание №5.
# ✔ Напишите программу, которая решает квадратные уравнения даже
# если дискриминант отрицательный.
# ✔ Используйте комплексные числа для извлечения квадратного корня.

# Для квадратного уравнения вида ax^2 + bx + c = 0 с дискриминантом D < 0 корни можно выразить в форме комплексных чисел:
# x1 = (-b + sqrt(D)) / 2a
# x2 = (-b - sqrt(D)) / 2a
# где sqrt(D) обозначает извлечение квадратного корня из дискриминанта D. Если D < 0, то корни x1 и x2 будут комплексными числами.
# В данной формуле, комплексная часть корня появляется вместе с мнимой единицей "i".

import math

a = int(input('Введите число a: '))
b = int(input('Введите число b: '))
c = int(input('Введите число c: '))
D = b ** 2 - 4 * a * c

if D > 0:
    x_1 = (-b + math.sqrt(D)) / (2 * a)
    x_2 = (-b - math.sqrt(D)) / (2 * a)
    print('Корни уравнения: x1 =', x_1, 'и x2 =', x_2)
elif D < 0:
    # x_1 = (-b + math.sqrt(abs(D)) * 1j) / (2 * a)
    # x_2 = (-b - math.sqrt(abs(D)) * 1j) / (2 * a)
    # print('Корни уравнения: x1 =', x_1, 'и x2 =', x_2)

    # Вар.2
    real = round(-b / (2 * a), 4)
    imaginary = round(math.sqrt(abs(D)) / (2 * a), 4)
    x_1 = complex(real, imaginary)
    x_2 = complex(real, imaginary)
    print(f'x_1: {x_1:.3f}, x_2: {x_2:.3f}')
else:
    x_1 = (-b + math.sqrt(D)) / (2 * a)
    print('Корни уравнения: x1 =', x_1)

