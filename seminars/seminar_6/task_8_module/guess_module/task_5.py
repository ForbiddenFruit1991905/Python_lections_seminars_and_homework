# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤ –º–æ–¥—É–ª—å —Å –∑–∞–≥–∞–¥–∫–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç —Å–ª–æ–≤–∞—Ä—å
# —Å–ø–∏—Å–∫–æ–≤.
# üìå –ö–ª—é—á —Å–ª–æ–≤–∞—Ä—è - –∑–∞–≥–∞–¥–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Å –æ—Ç–≥–∞–¥–∫–∞–º–∏.
# üìå –§—É–Ω–∫—Ü–∏—è –≤ —Ü–∏–∫–ª–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞–≥–∞–¥—ã–≤–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–π
# –≤—Å–µ —Å–≤–æ–∏ –∑–∞–≥–∞–¥–∫–∏.

from random import shuffle

def func_guess(word: str, data: list[str], attempts: int):
    count = 0
    while count < attempts - 1:
        count += 1
        if word in data:
            return f'–í—ã —É–≥–∞–¥–∞–ª–∏ —Å {count} –ø–æ–ø—ã—Ç–∫–∏'
        else:
            print(f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ {attempts - count}')
            word = input("–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: ")
    return f'–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–≥–∞–¥–∫–∏: {", ".join(data)}'

def func_dict(riddle: list[str], data: list[str]) -> dict:
    return dict(zip(riddle, data))

def func_key_riddle(riddle_l: list[str], data: list[str], attempts: int):
    mixed_sequence = list(zip(riddle_l, data))
    shuffle(mixed_sequence)
    for riddle, answer in mixed_sequence:
        print(f'\n{riddle}')
        print(func_guess(input("–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: "), [answer], attempts))

riddle_list = ["riddle for lemon: ", "riddle for apple: ", "riddle for banana: ", "riddle for strawberry: ", "riddle for melon: ", "riddle for watermelon: "]
my_list = ["lemon", "apple", "banana", "strawberry", "melon", "watermelon"]
print(func_guess(input("–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: "), my_list, 3))
print(func_dict(riddle_list, my_list))
print(func_key_riddle(riddle_list, my_list, 3))