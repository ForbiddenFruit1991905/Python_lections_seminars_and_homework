# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤ –º–æ–¥—É–ª—å —Å –∑–∞–≥–∞–¥–∫–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É (—Ç–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∫–∏)
# –∏ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–∞ —É–≥–∞–¥–∞–Ω–∞).
# üìå –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏—è.
# üìå –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è.
# üìå –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –∏–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
# –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–∏–¥–µ.
# üìå –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.

from random import shuffle

def func_guess(word: str, data: list[str], attempts: int):
    count = 0
    while count < attempts:
        count += 1
        if word in data:
            return f'–í—ã —É–≥–∞–¥–∞–ª–∏ —Å {count} –ø–æ–ø—ã—Ç–∫–∏'
        else:
            print(f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ {attempts - count}')
            word = input("–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: ")
    return f'–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–≥–∞–¥–∫–∏: {", ".join(data)}'

# def func_dict(riddle: list[str], data: list[str]) -> dict:
#     return dict(zip(riddle, data))
#
# def func_key_riddle(riddle_l: list[str], data: list[str], attempts: int):
#     mixed_sequence = list(zip(riddle_l, data))
#     shuffle(mixed_sequence)
#     for riddle, answer in mixed_sequence:
#         print(f'\n{riddle}')
#         print(func_guess(input("–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: "), [answer], attempts))

def func_dict_secret(riddle_l: list[str], data: list[str], attempts: int) -> dict:
    _secret_dict = {}
    count = 0
    while count < attempts:
        count += 1
        mixed_sequence = list(zip(riddle_l, data))
        shuffle(mixed_sequence)
        for riddle, answer in mixed_sequence:
            print(f'\n{riddle}')
            result = func_guess(input("–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: "), [answer], attempts)
            _secret_dict[riddle] = count
            if answer in result:
                break
            if count == attempts:
                break
    return _secret_dict

# üìå –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –∏–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
# –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–∏–¥–µ.
# üìå –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.

def func_print_secret_dict():
    res = func_dict_secret(riddle_list, my_list, 3)
    my_dict_comp = {riddle: count for riddle, count in res.items()}
    readable_results = {riddle: f'–£–≥–∞–¥–∞–Ω–æ —Å {count} –ø–æ–ø—ã—Ç–∫–∏' if count != 3 else '–ù–µ —É–≥–∞–¥–∞–Ω–æ' for riddle, count in
                        my_dict_comp.items()}
    for riddle, result in readable_results.items():
        print(f'{riddle}: {result}')

riddle_list = ["riddle for lemon: ", "riddle for apple: ", "riddle for banana: ", "riddle for strawberry: ", "riddle for melon: ", "riddle for watermelon: "]
my_list = ["lemon", "apple", "banana", "strawberry", "melon", "watermelon"]
# print(func_guess(input("–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: "), my_list, 3))
# print(func_dict(riddle_list, my_list))
# print(func_key_riddle(riddle_list, my_list, 3))
print(func_dict_secret(riddle_list, my_list, 3))
print(func_print_secret_dict())